#!/usr/bin/env python

import sys
sys.path.append('@CMAKE_SOURCE_DIR@/examples/') # to access sgutils

from ctypes import CDLL, c_double, c_int, c_void_p, byref, POINTER
import numpy
import argparse
from numpy import pi, sin, cos, tan, exp, log
import sgutils

# parse input arguments

parser = argparse.ArgumentParser(description='Generate polar flow.')
parser.add_argument('--dims', dest='dims', default='11,21',
                    help='Number of nodes in rho and theta')
parser.add_argument('--radius', dest='radius', default=1.0, type=float,
                    help='Min domain corner')
parser.add_argument('--n', dest='n', type=int, default=4,
                    help='Number of line segments')
parser.add_argument('--xline', dest='xline', default='0.1 + 0.6*cos(2*pi*t)',
                    help='X coordinate parametric representation of line as a function of t, 0 <= t <= 1')
parser.add_argument('--yline', dest='yline', default='-0.3 + 0.4*sin(2*pi*t)',
                    help='Y coordinate parametric representation of line as a function of t, 0 <= t <= 1')
args = parser.parse_args()

# create structured grid and field
dims = numpy.array(eval(args.dims), numpy.int32)
radius = args.radius
coords = sgutils.createPolarGrid(dims, radius)

# create line
n = args.n
t = numpy.linspace(0., 1., n + 1)
dstX, dstY = eval(args.xline), eval(args.yline)
print('Target parametric equation:')
print('x = {}'.format(args.xline))
print('y = {}'.format(args.yline))
print('positions: {}'.format([(dstX[i], dstY[i]) for i in range(len(dstX))]))

# project online 
sg = CDLL("@CMAKE_BINARY_DIR@/cpp/libsigrid@CMAKE_SHARED_LIBRARY_SUFFIX@")
this = c_void_p()

ier = sg.SgFlowInterp2D_new(byref(this))
assert(ier == 0)

srcCoords = (POINTER(c_double) * 2)(coords[0].ctypes.data_as(POINTER(c_double)),
                                    coords[1].ctypes.data_as(POINTER(c_double)))
ier = sg.SgFlowInterp2D_setSrcGrid(byref(this), dims.ctypes.data_as(POINTER(c_int)), srcCoords)
assert(ier == 0)

dstDims = (c_int*1)(n + 1)
dstCoords = (POINTER(c_double) * 2)(dstX.ctypes.data_as(POINTER(c_double)), dstY.ctypes.data_as(POINTER(c_double)))
ier = sg.SgFlowInterp2D_setDstGrid(byref(this), dstDims, dstCoords)
assert(ier == 0)

ier = sg.SgFlowInterp2D_computeWeights(byref(this))
assert(ier == 0)

x = coords[0]
y = coords[1]

# integrated flux
srcXFlux = numpy.zeros((dims[0] - 1, dims[1]), numpy.float64) # no flux across rho lines
srcYFlux = (1./(dims[1] - 1)) * numpy.ones((dims[0], dims[1] - 1), numpy.float64)   # constant flux across 
srcData = (POINTER(c_double) * 2)(srcXFlux.ctypes.data_as(POINTER(c_double)), srcYFlux.ctypes.data_as(POINTER(c_double)))
dstData = numpy.zeros((n,), numpy.float64) # to be filled in
sg.SgFlowInterp2D_apply(byref(this), srcData, dstData.ctypes.data_as(POINTER(c_double)))
sg.SgFlowInterp2D_debug(byref(this))
sg.SgFlowInterp2D_del(byref(this))

approx = dstData.sum()
print('integrated flux: {}'.format(approx))

sgutils.saveFlowVtk('polarFlow.vtk', coords, srcXFlux, srcYFlux)
sgutils.saveLineVtk('polarLine.vtk', (dstX, dstY), dstData)
