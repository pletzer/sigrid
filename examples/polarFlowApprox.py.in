#!/usr/bin/env python

import sys
sys.path.append('@CMAKE_SOURCE_DIR@/examples/') # to access sgutils

from ctypes import CDLL, c_double, c_int, c_void_p, byref, POINTER
import numpy
import math
import argparse
from numpy import pi, sin, cos, tan, exp, log
import sgutils

#
# find index position
#
def findIndicesForPosition(dims, coords, targetPoint, nitermax, tolpos):

    sg = CDLL("@CMAKE_BINARY_DIR@/cpp/libsigrid@CMAKE_SHARED_LIBRARY_SUFFIX@")
    this = c_void_p()
    tolpos_c = c_double(tolpos)

    ier = sg.SgFindPointInCell_new(byref(this), nitermax, tolpos_c)
    assert(ier == 0)

    # set the grid coordinates
    srcCoords = (POINTER(c_double) * 2)(coords[0].ctypes.data_as(POINTER(c_double)),
                                        coords[1].ctypes.data_as(POINTER(c_double)))
    periodicity = (c_int*2)(0, 1)
    ier = sg.SgFindPointInCell_setGrid(byref(this), 2, dims.ctypes.data_as(POINTER(c_int)), periodicity, srcCoords)
    assert(ier == 0)

    # try different initial guesses
    for dIndsInit in [((dims[0] - 1)/2., (dims[1] - 1)/2.), # centre
                      ((dims[0] - 1)/2., 0.              ), # edge
                      (dims[0] - 1.    , (dims[1] - 1)/2.),
                      ((dims[0] - 1)/2., dims[1] - 1.    ),
                      (0.              , (dims[1] - 1)/2.),
                      (0.              , 0.              ), # corner
                      (dims[0] - 1.0   , 0.              ),
                      (dims[0] - 1.0   , dims[1] - 1.0   ),
                      (0.              , dims[1] - 1.0   ),]:

        dInds = numpy.array(dIndsInit, numpy.float64)

        ier = sg.SgFindPointInCell_reset(byref(this), 
                                         dInds.ctypes.data_as(POINTER(c_double)), 
                                         targetPoint.ctypes.data_as(POINTER(c_double)))


        # Newton iterations
        end = 0
        while end == 0:
            end = sg.SgFindPointInCell_next(byref(this))

        if end == 1:
            # success
            break

    if end != 1:
        if end == -1:
            print('*** Hit max number of iterations for dIndsInit = {}'.format(dIndsInit))
        elif end == -2:
            print('*** Hit a fixed point? dIndsInit = {}'.format(dIndsInit))
        elif end == -3:
            print('*** Ending up outside of domain')
        else:
            print('*** Unknown error')

        # debug
        niters = c_int()
        errors = POINTER(c_double)()
        ier = sg.SgFindPointInCell_getErrorHistory(byref(this), byref(niters), byref(errors))
        for j in range(niters.value):
            print('iter {} error {}'.format(j, errors[j]))


    ier = sg.SgFindPointInCell_getIndices(byref(this), dInds.ctypes.data_as(POINTER(c_double)))
    assert(ier == 0)

    # clean up
    ier = sg.SgFindPointInCell_del(byref(this))
    assert(ier == 0)

    return dInds

#
# parse input arguments
#

parser = argparse.ArgumentParser(description='Generate polar flow.')
parser.add_argument('--dims', dest='dims', default='11,16',
                    help='Number of nodes in rho and theta')
parser.add_argument('--radius', dest='radius', default=1.0, type=float,
                    help='Min domain corner')
parser.add_argument('--n', dest='n', type=int, default=4,
                    help='Number of line segments')
parser.add_argument('--xline', dest='xline', default='0.1 +0.6*cos(2*pi*t)',
                    help='X coordinate parametric representation of line as a function of t, 0 <= t <= 1')
parser.add_argument('--yline', dest='yline', default='-0.5 + 0.4*sin(2*pi*t)',
                    help='Y coordinate parametric representation of line as a function of t, 0 <= t <= 1')
args = parser.parse_args()

# create structured grid and field
dims = numpy.array(eval(args.dims), numpy.int32)
radius = args.radius
coords = sgutils.createPolarGrid(dims, radius, eps = 0.01)

# create line
n = args.n
t = numpy.linspace(0., 1., n + 1)
dstX, dstY = eval(args.xline), eval(args.yline)
print('Target parametric equation:')
print('x = {}'.format(args.xline))
print('y = {}'.format(args.yline))
#print('positions: {}'.format([(dstX[i], dstY[i]) for i in range(len(dstX))]))

# create mid point values and deltas
numSegs = len(dstX) - 1
dstXMid = numpy.array([0.5*(dstX[i+1] + dstX[i]) for i in range(numSegs)])
dstYMid = numpy.array([0.5*(dstY[i+1] + dstY[i]) for i in range(numSegs)])
dstXDif = numpy.array([dstX[i+1] - dstX[i] for i in range(numSegs)])
dstYDif = numpy.array([dstY[i+1] - dstY[i] for i in range(numSegs)])

# 
# interpolate the grid to the dstXMid,dstYMid points
#
fluxes = numpy.zeros((numSegs,), numpy.float64)
fluxesExact = numpy.zeros((numSegs,), numpy.float64)

# project on line 

nitermax = 100
tolpos = 1.e-12
targetPoint = numpy.array([0., 0.])


# set the vector field in Cartesian coordinates
xx, yy = coords[0], coords[1]
rr2 = xx**2 + yy**2
vxx = xx/(2. * math.pi * rr2) # singular
vyy = yy/(2. * math.pi * rr2)

for i in range(numSegs):

    x, y = dstXMid[i], dstYMid[i]
    targetPoint[:] = x, y
    r2 = x*x + y*y

    # find the index position corresponding to the target
    dInds = findIndicesForPosition(dims, coords, targetPoint, nitermax, tolpos)

    ij00 = (math.floor(dInds[0]), math.floor(dInds[1]))
    ij10 = (ij00[0] + 1, ij00[1] + 0)
    ij11 = (ij00[0] + 1, ij00[1] + 1)
    ij01 = (ij00[0] + 0, ij00[1] + 1)

    # compute the weights
    xi = dInds - numpy.array(ij00, numpy.float64)
    w00 = (1. - xi[0])*(1. - xi[1])
    w10 = xi[0]*(1. - xi[1])
    w11 = xi[0]*xi[1]
    w01 = (1. - xi[0])*xi[1]

    # interpolate
    vx = w00*vxx[ij00] + w10*vxx[ij10] + w11*vxx[ij11] + w01*vxx[ij01]
    vy = w00*vyy[ij00] + w10*vyy[ij10] + w11*vyy[ij11] + w01*vyy[ij01]
    dx = dstXDif[i]
    dy = dstYDif[i]

    vxExact = x/(2. * pi * r2)
    vyExact = y/(2. * pi * r2)
    vError = numpy.sqrt( (vx - vxExact)**2 + (vy - vyExact)**2 )

    print('x = {:.3f} y = {:.3f} vx = {:.3f} vy = {:.3f} vError = {:.3f}'.format(x, y, vx, vy, vError))
    fluxes[i] = vx*dy - vy*dx
    fluxesExact[i] = vxExact*dy - vyExact*dx

print('integrated flux: (bilinear) {} (exact field) {}'.format(fluxes.sum(), fluxesExact.sum()))
